using Microsoft.Xna.Framework.Content;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;
using ThePeacenet.Backend.Manual;

namespace ThePeacenet.Backend.AssetTypes
{
    public enum ExploitVolatility
    {
        Stable,
        Safe,
        Unstable,
        Dangerous,
        Volatile
    }

    public class Exploit : ManualPageAsset
    {
        internal Exploit(string id, string name, string description, ExploitVolatility volatility, bool unlockedByDefault, List<ProtocolImplementation> attacks, ContentManager content) : base(id, name, description, content)
        {
            this.UnlockedByDefault = unlockedByDefault;
            this.Volatility = volatility;
            this.Attacks = attacks;
        }

        public bool UnlockedByDefault { get; private set; }
        public ExploitVolatility Volatility { get; private set; }
        public IEnumerable<ProtocolImplementation> Attacks { get; private set; }
    }

    public class ExploitData : AssetBuilder<Exploit>
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Description { get; set; }

        [ContentSerializer(Optional = true)]
        public bool UnlockedByDefault { get; set; } = false;

        [ContentSerializer(Optional = true)]
        public ExploitVolatility Volatility { get; set; } = ExploitVolatility.Stable;

        [ContentSerializer(Optional = false, CollectionItemName = "Id")]
        public List<string> ProtocolIds { get; set; }

        public override Exploit Build(ItemContainer items)
        {
            List<ProtocolImplementation> attacks = new List<ProtocolImplementation>();
            foreach(var id in ProtocolIds)
            {
                var exp = items.GetItem<ProtocolImplementation>(id);
                if(exp != null)
                {
                    attacks.Add(exp);
                }
            }

            return new Exploit(Id, Name, Description, Volatility, UnlockedByDefault, attacks, items.Content);
        }
    }
}
